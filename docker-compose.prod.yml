# Audio-Only Drama â€” Automated FX Engine
# Docker Compose configuration for production

version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16
    container_name: audio-drama-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      POSTGRES_DB: ${POSTGRES_DB:-fx}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-fx}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - audio-drama-prod
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: audio-drama-redis-prod
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - audio-drama-prod
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # FastAPI backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: audio-drama-backend-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@postgres:5432/${POSTGRES_DB:-fx}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=false
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    volumes:
      - uploads_prod:/app/uploads
      - temp_prod:/app/temp
      - logs_prod:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - audio-drama-prod
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: audio-drama-celery-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@postgres:5432/${POSTGRES_DB:-fx}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=false
      - ENVIRONMENT=production
    volumes:
      - uploads_prod:/app/uploads
      - temp_prod:/app/temp
      - logs_prod:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - audio-drama-prod
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Celery beat (scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: audio-drama-celery-beat-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@postgres:5432/${POSTGRES_DB:-fx}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=false
      - ENVIRONMENT=production
    volumes:
      - logs_prod:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - audio-drama-prod
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: audio-drama-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    restart: always
    networks:
      - audio-drama-prod
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  uploads_prod:
    driver: local
  temp_prod:
    driver: local
  logs_prod:
    driver: local

networks:
  audio-drama-prod:
    driver: bridge
