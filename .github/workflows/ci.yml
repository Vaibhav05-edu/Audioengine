name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      run: |
        cd web
        npm ci
        
    - name: Run Python linting
      run: |
        flake8 . --exclude=.venv,node_modules,web
        black --check . --exclude=".venv|node_modules|web"
        isort --check-only . --skip-glob=".venv/*" --skip-glob="web/*"
        
    - name: Run Node.js linting
      run: |
        cd web
        npm run lint
        
    - name: Run Python type checking
      run: |
        mypy backend/ --ignore-missing-imports
        
    - name: Run Node.js type checking
      run: |
        cd web
        npm run type-check

  # Test backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: fx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://app:app@localhost:5432/fx_test
      run: |
        cd backend
        alembic upgrade head
        
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://app:app@localhost:5432/fx_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: true
        ENVIRONMENT: testing
      run: |
        pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Test frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
        
    - name: Install Node.js dependencies
      run: |
        cd web
        npm ci
        
    - name: Run frontend tests
      run: |
        cd web
        npm test -- --coverage --watchAll=false
        
    - name: Build frontend
      run: |
        cd web
        npm run build

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run security scan
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: audio-drama-fx-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Celery image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.celery
        push: false
        tags: audio-drama-fx-celery:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        file: ./web/Dockerfile
        push: false
        tags: audio-drama-fx-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "‚ö†Ô∏è  This is a placeholder. Configure your staging deployment."
        # Add your staging deployment commands here

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "‚ö†Ô∏è  This is a placeholder. Configure your production deployment."
        # Add your production deployment commands here
