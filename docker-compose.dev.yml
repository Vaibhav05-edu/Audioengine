# Audio-Only Drama â€” Automated FX Engine
# Docker Compose configuration for development

version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16
    container_name: audio-drama-postgres-dev
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: fx
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d fx"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - audio-drama-dev

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: audio-drama-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - audio-drama-dev

  # FastAPI backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: audio-drama-backend-dev
    environment:
      - DATABASE_URL=postgresql://app:app@postgres:5432/fx
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DEBUG=true
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - audio-drama-dev
    command: ["uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Celery worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: audio-drama-celery-dev
    environment:
      - DATABASE_URL=postgresql://app:app@postgres:5432/fx
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DEBUG=true
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app/backend
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - audio-drama-dev
    command: ["celery", "-A", "backend.celery_app", "worker", "--loglevel=debug"]

  # Celery beat (scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: audio-drama-celery-beat-dev
    environment:
      - DATABASE_URL=postgresql://app:app@postgres:5432/fx
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DEBUG=true
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - audio-drama-dev
    command: ["celery", "-A", "backend.celery_app", "beat", "--loglevel=debug"]

  # React frontend
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: audio-drama-frontend-dev
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - audio-drama-dev

  # Redis Commander (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: audio-drama-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - audio-drama-dev
    profiles:
      - tools

  # pgAdmin (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: audio-drama-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@audio-drama.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - audio-drama-dev
    profiles:
      - tools

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  audio-drama-dev:
    driver: bridge
